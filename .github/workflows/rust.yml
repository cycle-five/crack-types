name: Rust CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [nightly]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Install Dependencies
      run: sudo apt-get update && sudo apt-get install -y cmake pkg-config libssl-dev ffmpeg libopus-dev
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Build (default features)
      run: cargo build
    
    - name: Build (all features)
      run: cargo build --all-features
    
    - name: Build (no default features)
      run: cargo build --no-default-features
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Clippy
      run: cargo clippy -- -D warnings
    
    - name: Check formatting
      run: cargo fmt --all -- --check

  # codecov:
  #   name: Code Coverage
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Install Rust
  #     uses: dtolnay/rust-toolchain@nightly
    
  #   - name: Install cargo-llvm-cov
  #     run: cargo install cargo-llvm-cov
    
  #   - name: Generate code coverage
  #     run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
  #   - name: Upload to codecov.io
  #     uses: codecov/codecov-action@v4
  #     with:
  #       file: lcov.info
  #       fail_ci_if_error: false
  #       token: ${{ secrets.CODECOV_TOKEN }}

  # publish-check:
    # name: Check Package Publishing
    # runs-on: ubuntu-latest
    # 
    # steps:
    # - uses: actions/checkout@v4
    # 
    # - name: Install Rust
      # uses: dtolnay/rust-toolchain@stable
    # 
    # - name: Check publishing
      # run: cargo publish --dry-run
